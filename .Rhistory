this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
splits = str_split(text, "\\}\\}")
x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
get_entries = function(cols, c_name){
#cols = str_replace_all(cols, fixed("\n"), "")
cols = str_replace_all(cols, "[ \t\r\n]", "")
data = str_split(cols, fixed("|"))
x = which(str_locate(data[[1]], fixed("=")) != "")
data[[1]][x[x < length(data[[1]]) + 1]]
list = lapply(data[[1]][x[x < length(data[[1]]) + 1]], get_df)
n = str_replace_all(c_name, fixed("_"), " ")
if("name" %in% names(list) == FALSE || list[[1]]$name != n)
list[[1]]$name = n
as.data.frame(list)
}
get_categories = function(cats){
splits = str_split(cats, "Category:")
df = data.frame(categories = paste(splits[[1]][2:length(splits[[1]])],collapse=", "))
}
get_df = function(x_eq_y){
splits = str_split(x_eq_y, "=")
df = data.frame(splits[[1]][2])
names(df) <- splits[[1]][1]
if(names(df) == "species" && str_sub(df$species, str_length(df$species), str_length(df$species)) == "s")
df$species = str_sub(df$species, 1, str_length(df$species) -1)
df
}
subname = function(name, pattern, nr){
splits = str_split(name, pattern)
splits[[1]][nr]
}
table=get_table(characterNames[50:100])
get_entries = function(cols, c_name){
#cols = str_replace_all(cols, fixed("\n"), "")
cols = str_replace_all(cols, "[ \t\r\n]", "")
data = str_split(cols, fixed("|"))
x = which(str_locate(data[[1]], fixed("=")) != "")
data[[1]][x[x < length(data[[1]]) + 1]]
list = lapply(data[[1]][x[x < length(data[[1]]) + 1]], get_df)
n = str_replace_all(c_name, fixed("_"), " ")
if("name" %in% names(list) == FALSE || list$name != n)
list[[1]]$name = n
as.data.frame(list)
}
table=get_table(characterNames[50:100])
table=get_table(characterNames[50:100])
table=get_table(characterNames[50:60])
table=get_table(characterNames[60:70])
table=get_table(characterNames[70:80])
table=get_table(characterNames[70:75])
table=get_table(characterNames[70:72])
table=get_table(characterNames[70:73])
table=get_table(characterNames[73:74])
table=get_table(characterNames[72:74])
table=get_table(characterNames[72:73])
characterNames[74]
table=get_table(characterNames[70:75,-74])
table=get_table(characterNames[70:75][-74])
names = characterNames[70:100]
table=get_table(names[-74])
table=get_table(characterNames[75:100])
table=get_table(characterNames[75:85])
table=get_table(characterNames[75:80])
table=get_table(characterNames[75])
characterNames[75]
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table=get_table(characterNames[75])
table=get_table(characterNames[75])
splits
x
x == NA
x > 0
x > 0 == F
(x > 0) == F
which(str_locate(splits[[1]], fixed("Character|")) != "")
which(str_locate(splits[[1]], fixed("Character|")) != "") == 0
class(which(str_locate(splits[[1]], fixed("Character|")) != ""))
which(str_locate(splits[[1]], fixed("Character|")) != "") == integer(0)
str_locate(splits[[1]], fixed("Character|"))
str_locate(splits[[1]], fixed("Character|")) != ""
x
match(x, NA)
match(3, NA)
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
splits = str_split(text, "\\}\\}")
x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table=get_table(characterNames[75])
View(table)
table=get_table(characterNames[74])
table=get_table(characterNames[76:100])
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table=get_table(characterNames[76:100])
table=get_table(characterNames[76:100])
n
table=get_table(characterNames[85:100])
names <- readRDS("C:/Users/Lilli/git/adventuretime/characterNames.rds")
library(httr)
library(jsonlite)
library(stringr)
library(data.table)
## --------- functions for scraping ---------------------
get_names = function(){
url = "https://adventuretime.fandom.com/wiki/Category:Characters"
from = "?from="
list = get_names_for_url(url)
for(i in 1:6){
print(list[length(list)])
next_url = paste(c(url, from, list[length(list)]), collapse = "")
print(next_url)
l = get_names_for_url(next_url)
print(length(l))
k = c(list, l)
list = k
}
list
}
get_names_for_url = function(url){
chars = GET(url)
raw = rawToChar(chars$content)
chars = str_sub(raw, str_locate(raw, "All items")[1], str_length(raw))
s = str_split(chars, fixed("<a href=\"/wiki/"))
chars = s[[1]][c(T,F)]
n = lapply(chars[-1], subname, pattern = "\"", nr = 1)
n = delete_betises(n, ":")
n = delete_betises(n, fixed("Local_Sitemap"))
}
delete_betises = function(n, pat){
x = which(str_locate(n, pat) != "")
if(length(x) > 0) n = n[-x]
else n
}
## now the functions for the data table
get_table = function(names){
#urls = lapply(names, get_url)
rbindlist(lapply(names, get_row), fill = T)
}
get_url = function(name){
paste(c("https://adventuretime.fandom.com/api.php?action=query&prop=revisions&titles=",
name, "&rvprop=content&format=json"), collapse = "")
}
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
get_entries = function(cols, c_name){
#cols = str_replace_all(cols, fixed("\n"), "")
cols = str_replace_all(cols, "[ \t\r\n]", "")
data = str_split(cols, fixed("|"))
x = which(str_locate(data[[1]], fixed("=")) != "")
data[[1]][x[x < length(data[[1]]) + 1]]
list = lapply(data[[1]][x[x < length(data[[1]]) + 1]], get_df)
n = str_replace_all(c_name, fixed("_"), " ")
if("name" %in% names(list) == FALSE || list$name != n)
list[[1]]$name = n
as.data.frame(list)
}
get_categories = function(cats){
splits = str_split(cats, "Category:")
df = data.frame(categories = paste(splits[[1]][2:length(splits[[1]])],collapse=", "))
}
get_df = function(x_eq_y){
splits = str_split(x_eq_y, "=")
df = data.frame(splits[[1]][2])
names(df) <- splits[[1]][1]
if(names(df) == "species" && str_sub(df$species, str_length(df$species), str_length(df$species)) == "s")
df$species = str_sub(df$species, 1, str_length(df$species) -1)
df
}
subname = function(name, pattern, nr){
splits = str_split(name, pattern)
splits[[1]][nr]
}
table = get_table(names[80:85])
table = get_table(names[85:90])
table = get_table(names[90:95])
table = get_table(names[90:92])
table = get_table(names[90:93])
table = get_table(names[90:94])
names[94]
View(table)
s = "ABFOJBOSAFJOSANCnclkcnlknfekf"
str_locate(s, fixed("Youmay|"))
str_locate(s, fixed("Youmay|"))[1]
match(str_locate(s, fixed("Youmay|"))[1], NA) == 1
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
#if(str_locate(text, fixed("Youmay|")))
#  text = str_sub(text, )
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cb
table = get_table(names[90:94])
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
#if(str_locate(text, fixed("Youmay|")))
#  text = str_sub(text, )
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
table = get_table(names[94])
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
#if(str_locate(text, fixed("Youmay|")))
#  text = str_sub(text, )
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
#  x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
table = get_table(names[94])
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
cols
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
#if(str_locate(text, fixed("Youmay|")))
#  text = str_sub(text, )
#splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
#  x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(text, name), get_categories(splits[[1]][length(splits[[1]])]))
}
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
#if(str_locate(text, fixed("Youmay|")))
#  text = str_sub(text, )
#splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
#  x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(text, name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
data
list
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
#if(str_locate(text, fixed("Youmay|")))
#  text = str_sub(text, )
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
#  x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(text, name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
View(table)
View(table)
grepl
grepl("1+2", "1+2", fixed=TRUE)
grepl("1+2", "1+2fe", fixed=TRUE)
grepl("1+2", "1+fe", fixed=TRUE)
table = get_table(names[94])
list
names(list)
as.data.frame(list)
names(as.data.frame(list))
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
if(grepl(text, "{{Youmay|", fixed = T))
text = str_sub(text, str_locate(text, fixed("\n")), str_length(text))
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
if(grepl(text, "{{Youmay|", fixed = T))
text = str_sub(text, str_locate(text, fixed("\n")), str_length(text))
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
table = get_table(names[94])
grepl(text, "{{Youmay", fixed = TRUE)
grepl(text, "Youmay", fixed = TRUE)
grepl("Youmay", text, fixed = TRUE)
grepl("{{Youmay", text, fixed = TRUE)
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, fixed("\n"), "")
text = str_replace_all(text, "[\\[\\]]", "")
if(grepl("Youmay|", text, fixed = T))
text = str_sub(text, str_locate(text, fixed("\n")), str_length(text))
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
str_locate(text, fixed("\n"))
table = get_table(names[94])
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, "[\\[\\]]", "")
if(grepl("Youmay|", text, fixed = T))
text = str_sub(text, str_locate(text, fixed("\n")), str_length(text))
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
str_locate(text, fixed("\n"))
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
str_sub(text, str_locate(text, fixed("\n")), str_length(text))
str_length(text)
str_sub(text, 57, str_length(text))
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, "[\\[\\]]", "")
if(grepl("Youmay|", text, fixed = T)){
start = str_locate(text, fixed("\n"))
text = str_sub(text, start, str_length(text))
}
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
debugSource('C:/Users/Lilli/git/adventuretime/Scraper.R')
table = get_table(names[94])
table = get_table(names[94])
View(start)
get_row = function(name){
t = GET(get_url(name))
this.raw.content <- rawToChar(t$content)
this.content <- fromJSON(this.raw.content)
df = as.data.frame(this.content[[1]])
text = df[length(df)][[1]]
text = gsub("<[^>]+>", "",text)
text = str_replace_all(text, "'", "")
text = str_replace_all(text, "[\\[\\]]", "")
if(grepl("Youmay|", text, fixed = T)){
start = str_locate(text, fixed("\n"))[1]
text = str_sub(text, start, str_length(text))
}
splits = str_split(text, "\\}\\}")
#x = which(str_locate(splits[[1]], fixed("Character|")) != "")[1]
#if(match(x, NA) == 1)
x = which(str_locate(splits[[1]], fixed("|")) != "")[1]
cbind(get_entries(splits[[1]][x], name), get_categories(splits[[1]][length(splits[[1]])]))
}
table = get_table(names[94])
View(table)
table = get_table(names[95:100])
table = get_table(names[95:100])
c
c
c
c
c
View(table)
